// Code generated by protoc-gen-go.
// source: syndicate_cc.proto
// DO NOT EDIT!

/*
Package cmdctrl is a generated protocol buffer package.

It is generated from these files:
	syndicate_cc.proto

It has these top-level messages:
	RingUpdateResult
	StatsMsg
	EmptyMsg
	StatusMsg
	Ring
	HealthCheckMsg
*/
package cmdctrl

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RingUpdateResult struct {
	Newversion int64 `protobuf:"varint,1,opt,name=newversion" json:"newversion,omitempty"`
}

func (m *RingUpdateResult) Reset()         { *m = RingUpdateResult{} }
func (m *RingUpdateResult) String() string { return proto.CompactTextString(m) }
func (*RingUpdateResult) ProtoMessage()    {}

type StatsMsg struct {
	Statsjson []byte `protobuf:"bytes,1,opt,name=statsjson,proto3" json:"statsjson,omitempty"`
}

func (m *StatsMsg) Reset()         { *m = StatsMsg{} }
func (m *StatsMsg) String() string { return proto.CompactTextString(m) }
func (*StatsMsg) ProtoMessage()    {}

type EmptyMsg struct {
}

func (m *EmptyMsg) Reset()         { *m = EmptyMsg{} }
func (m *EmptyMsg) String() string { return proto.CompactTextString(m) }
func (*EmptyMsg) ProtoMessage()    {}

type StatusMsg struct {
	Status bool   `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *StatusMsg) Reset()         { *m = StatusMsg{} }
func (m *StatusMsg) String() string { return proto.CompactTextString(m) }
func (*StatusMsg) ProtoMessage()    {}

type Ring struct {
	Version int64  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Ring    []byte `protobuf:"bytes,2,opt,name=ring,proto3" json:"ring,omitempty"`
}

func (m *Ring) Reset()         { *m = Ring{} }
func (m *Ring) String() string { return proto.CompactTextString(m) }
func (*Ring) ProtoMessage()    {}

type HealthCheckMsg struct {
	Status bool   `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Ts     int64  `protobuf:"varint,3,opt,name=ts" json:"ts,omitempty"`
}

func (m *HealthCheckMsg) Reset()         { *m = HealthCheckMsg{} }
func (m *HealthCheckMsg) String() string { return proto.CompactTextString(m) }
func (*HealthCheckMsg) ProtoMessage()    {}

func init() {
	proto.RegisterType((*RingUpdateResult)(nil), "cmdctrl.RingUpdateResult")
	proto.RegisterType((*StatsMsg)(nil), "cmdctrl.StatsMsg")
	proto.RegisterType((*EmptyMsg)(nil), "cmdctrl.EmptyMsg")
	proto.RegisterType((*StatusMsg)(nil), "cmdctrl.StatusMsg")
	proto.RegisterType((*Ring)(nil), "cmdctrl.Ring")
	proto.RegisterType((*HealthCheckMsg)(nil), "cmdctrl.HealthCheckMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for CmdCtrl service

type CmdCtrlClient interface {
	RingUpdate(ctx context.Context, in *Ring, opts ...grpc.CallOption) (*RingUpdateResult, error)
	Reload(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatusMsg, error)
	Restart(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatusMsg, error)
	Start(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatusMsg, error)
	Stop(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatusMsg, error)
	Exit(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatusMsg, error)
	Stats(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatsMsg, error)
	HealthCheck(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*HealthCheckMsg, error)
}

type cmdCtrlClient struct {
	cc *grpc.ClientConn
}

func NewCmdCtrlClient(cc *grpc.ClientConn) CmdCtrlClient {
	return &cmdCtrlClient{cc}
}

func (c *cmdCtrlClient) RingUpdate(ctx context.Context, in *Ring, opts ...grpc.CallOption) (*RingUpdateResult, error) {
	out := new(RingUpdateResult)
	err := grpc.Invoke(ctx, "/cmdctrl.CmdCtrl/RingUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdCtrlClient) Reload(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatusMsg, error) {
	out := new(StatusMsg)
	err := grpc.Invoke(ctx, "/cmdctrl.CmdCtrl/Reload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdCtrlClient) Restart(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatusMsg, error) {
	out := new(StatusMsg)
	err := grpc.Invoke(ctx, "/cmdctrl.CmdCtrl/Restart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdCtrlClient) Start(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatusMsg, error) {
	out := new(StatusMsg)
	err := grpc.Invoke(ctx, "/cmdctrl.CmdCtrl/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdCtrlClient) Stop(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatusMsg, error) {
	out := new(StatusMsg)
	err := grpc.Invoke(ctx, "/cmdctrl.CmdCtrl/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdCtrlClient) Exit(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatusMsg, error) {
	out := new(StatusMsg)
	err := grpc.Invoke(ctx, "/cmdctrl.CmdCtrl/Exit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdCtrlClient) Stats(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*StatsMsg, error) {
	out := new(StatsMsg)
	err := grpc.Invoke(ctx, "/cmdctrl.CmdCtrl/Stats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdCtrlClient) HealthCheck(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*HealthCheckMsg, error) {
	out := new(HealthCheckMsg)
	err := grpc.Invoke(ctx, "/cmdctrl.CmdCtrl/HealthCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CmdCtrl service

type CmdCtrlServer interface {
	RingUpdate(context.Context, *Ring) (*RingUpdateResult, error)
	Reload(context.Context, *EmptyMsg) (*StatusMsg, error)
	Restart(context.Context, *EmptyMsg) (*StatusMsg, error)
	Start(context.Context, *EmptyMsg) (*StatusMsg, error)
	Stop(context.Context, *EmptyMsg) (*StatusMsg, error)
	Exit(context.Context, *EmptyMsg) (*StatusMsg, error)
	Stats(context.Context, *EmptyMsg) (*StatsMsg, error)
	HealthCheck(context.Context, *EmptyMsg) (*HealthCheckMsg, error)
}

func RegisterCmdCtrlServer(s *grpc.Server, srv CmdCtrlServer) {
	s.RegisterService(&_CmdCtrl_serviceDesc, srv)
}

func _CmdCtrl_RingUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Ring)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CmdCtrlServer).RingUpdate(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CmdCtrl_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CmdCtrlServer).Reload(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CmdCtrl_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CmdCtrlServer).Restart(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CmdCtrl_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CmdCtrlServer).Start(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CmdCtrl_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CmdCtrlServer).Stop(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CmdCtrl_Exit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CmdCtrlServer).Exit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CmdCtrl_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CmdCtrlServer).Stats(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CmdCtrl_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CmdCtrlServer).HealthCheck(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _CmdCtrl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cmdctrl.CmdCtrl",
	HandlerType: (*CmdCtrlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RingUpdate",
			Handler:    _CmdCtrl_RingUpdate_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _CmdCtrl_Reload_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _CmdCtrl_Restart_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _CmdCtrl_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _CmdCtrl_Stop_Handler,
		},
		{
			MethodName: "Exit",
			Handler:    _CmdCtrl_Exit_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _CmdCtrl_Stats_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _CmdCtrl_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
