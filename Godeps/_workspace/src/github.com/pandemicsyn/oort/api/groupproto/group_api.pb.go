// Code generated by protoc-gen-go.
// source: group_api.proto
// DO NOT EDIT!

/*
Package groupproto is a generated protocol buffer package.

It is generated from these files:
	group_api.proto

It has these top-level messages:
	EmptyMsg
	WriteRequest
	LookupRequest
	ReadRequest
	DeleteRequest
	LookupGroupRequest
	ReadGroupRequest
	WriteResponse
	LookupResponse
	LookupGroupResponse
	LookupGroupItem
	ReadGroupResponse
	ReadGroupItem
	ReadResponse
	DeleteResponse
*/
package groupproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type EmptyMsg struct {
}

func (m *EmptyMsg) Reset()                    { *m = EmptyMsg{} }
func (m *EmptyMsg) String() string            { return proto.CompactTextString(m) }
func (*EmptyMsg) ProtoMessage()               {}
func (*EmptyMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type WriteRequest struct {
	KeyA           uint64 `protobuf:"varint,1,opt,name=keyA" json:"keyA,omitempty"`
	KeyB           uint64 `protobuf:"varint,2,opt,name=keyB" json:"keyB,omitempty"`
	ChildKeyA      uint64 `protobuf:"varint,3,opt,name=childKeyA" json:"childKeyA,omitempty"`
	ChildKeyB      uint64 `protobuf:"varint,4,opt,name=childKeyB" json:"childKeyB,omitempty"`
	Value          []byte `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	TimestampMicro int64  `protobuf:"varint,6,opt,name=timestampMicro" json:"timestampMicro,omitempty"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type LookupRequest struct {
	KeyA      uint64 `protobuf:"varint,1,opt,name=keyA" json:"keyA,omitempty"`
	KeyB      uint64 `protobuf:"varint,2,opt,name=keyB" json:"keyB,omitempty"`
	ChildKeyA uint64 `protobuf:"varint,3,opt,name=childKeyA" json:"childKeyA,omitempty"`
	ChildKeyB uint64 `protobuf:"varint,4,opt,name=childKeyB" json:"childKeyB,omitempty"`
}

func (m *LookupRequest) Reset()                    { *m = LookupRequest{} }
func (m *LookupRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupRequest) ProtoMessage()               {}
func (*LookupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ReadRequest struct {
	KeyA      uint64 `protobuf:"varint,1,opt,name=keyA" json:"keyA,omitempty"`
	KeyB      uint64 `protobuf:"varint,2,opt,name=keyB" json:"keyB,omitempty"`
	ChildKeyA uint64 `protobuf:"varint,3,opt,name=childKeyA" json:"childKeyA,omitempty"`
	ChildKeyB uint64 `protobuf:"varint,4,opt,name=childKeyB" json:"childKeyB,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type DeleteRequest struct {
	KeyA           uint64 `protobuf:"varint,1,opt,name=keyA" json:"keyA,omitempty"`
	KeyB           uint64 `protobuf:"varint,2,opt,name=keyB" json:"keyB,omitempty"`
	ChildKeyA      uint64 `protobuf:"varint,3,opt,name=childKeyA" json:"childKeyA,omitempty"`
	ChildKeyB      uint64 `protobuf:"varint,4,opt,name=childKeyB" json:"childKeyB,omitempty"`
	TimestampMicro int64  `protobuf:"varint,5,opt,name=timestampMicro" json:"timestampMicro,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type LookupGroupRequest struct {
	KeyA uint64 `protobuf:"varint,1,opt,name=keyA" json:"keyA,omitempty"`
	KeyB uint64 `protobuf:"varint,2,opt,name=keyB" json:"keyB,omitempty"`
}

func (m *LookupGroupRequest) Reset()                    { *m = LookupGroupRequest{} }
func (m *LookupGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupGroupRequest) ProtoMessage()               {}
func (*LookupGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ReadGroupRequest struct {
	KeyA uint64 `protobuf:"varint,1,opt,name=keyA" json:"keyA,omitempty"`
	KeyB uint64 `protobuf:"varint,2,opt,name=keyB" json:"keyB,omitempty"`
}

func (m *ReadGroupRequest) Reset()                    { *m = ReadGroupRequest{} }
func (m *ReadGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadGroupRequest) ProtoMessage()               {}
func (*ReadGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type WriteResponse struct {
	TimestampMicro int64  `protobuf:"varint,1,opt,name=timestampMicro" json:"timestampMicro,omitempty"`
	Err            string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *WriteResponse) Reset()                    { *m = WriteResponse{} }
func (m *WriteResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()               {}
func (*WriteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type LookupResponse struct {
	TimestampMicro int64  `protobuf:"varint,1,opt,name=timestampMicro" json:"timestampMicro,omitempty"`
	Length         uint32 `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
	Err            string `protobuf:"bytes,3,opt,name=err" json:"err,omitempty"`
}

func (m *LookupResponse) Reset()                    { *m = LookupResponse{} }
func (m *LookupResponse) String() string            { return proto.CompactTextString(m) }
func (*LookupResponse) ProtoMessage()               {}
func (*LookupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type LookupGroupResponse struct {
	Items []*LookupGroupItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Err   string             `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *LookupGroupResponse) Reset()                    { *m = LookupGroupResponse{} }
func (m *LookupGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*LookupGroupResponse) ProtoMessage()               {}
func (*LookupGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *LookupGroupResponse) GetItems() []*LookupGroupItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type LookupGroupItem struct {
	ChildKeyA      uint64 `protobuf:"varint,1,opt,name=childKeyA" json:"childKeyA,omitempty"`
	ChildKeyB      uint64 `protobuf:"varint,2,opt,name=childKeyB" json:"childKeyB,omitempty"`
	TimestampMicro int64  `protobuf:"varint,3,opt,name=timestampMicro" json:"timestampMicro,omitempty"`
	Length         uint32 `protobuf:"varint,4,opt,name=length" json:"length,omitempty"`
}

func (m *LookupGroupItem) Reset()                    { *m = LookupGroupItem{} }
func (m *LookupGroupItem) String() string            { return proto.CompactTextString(m) }
func (*LookupGroupItem) ProtoMessage()               {}
func (*LookupGroupItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type ReadGroupResponse struct {
	Items []*ReadGroupItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Err   string           `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *ReadGroupResponse) Reset()                    { *m = ReadGroupResponse{} }
func (m *ReadGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadGroupResponse) ProtoMessage()               {}
func (*ReadGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ReadGroupResponse) GetItems() []*ReadGroupItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type ReadGroupItem struct {
	ChildKeyA      uint64 `protobuf:"varint,1,opt,name=childKeyA" json:"childKeyA,omitempty"`
	ChildKeyB      uint64 `protobuf:"varint,2,opt,name=childKeyB" json:"childKeyB,omitempty"`
	TimestampMicro int64  `protobuf:"varint,3,opt,name=timestampMicro" json:"timestampMicro,omitempty"`
	Value          []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ReadGroupItem) Reset()                    { *m = ReadGroupItem{} }
func (m *ReadGroupItem) String() string            { return proto.CompactTextString(m) }
func (*ReadGroupItem) ProtoMessage()               {}
func (*ReadGroupItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type ReadResponse struct {
	TimestampMicro int64  `protobuf:"varint,1,opt,name=timestampMicro" json:"timestampMicro,omitempty"`
	Value          []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Err            string `protobuf:"bytes,3,opt,name=err" json:"err,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type DeleteResponse struct {
	TimestampMicro int64  `protobuf:"varint,1,opt,name=timestampMicro" json:"timestampMicro,omitempty"`
	Err            string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func init() {
	proto.RegisterType((*EmptyMsg)(nil), "groupproto.EmptyMsg")
	proto.RegisterType((*WriteRequest)(nil), "groupproto.WriteRequest")
	proto.RegisterType((*LookupRequest)(nil), "groupproto.LookupRequest")
	proto.RegisterType((*ReadRequest)(nil), "groupproto.ReadRequest")
	proto.RegisterType((*DeleteRequest)(nil), "groupproto.DeleteRequest")
	proto.RegisterType((*LookupGroupRequest)(nil), "groupproto.LookupGroupRequest")
	proto.RegisterType((*ReadGroupRequest)(nil), "groupproto.ReadGroupRequest")
	proto.RegisterType((*WriteResponse)(nil), "groupproto.WriteResponse")
	proto.RegisterType((*LookupResponse)(nil), "groupproto.LookupResponse")
	proto.RegisterType((*LookupGroupResponse)(nil), "groupproto.LookupGroupResponse")
	proto.RegisterType((*LookupGroupItem)(nil), "groupproto.LookupGroupItem")
	proto.RegisterType((*ReadGroupResponse)(nil), "groupproto.ReadGroupResponse")
	proto.RegisterType((*ReadGroupItem)(nil), "groupproto.ReadGroupItem")
	proto.RegisterType((*ReadResponse)(nil), "groupproto.ReadResponse")
	proto.RegisterType((*DeleteResponse)(nil), "groupproto.DeleteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for GroupStore service

type GroupStoreClient interface {
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	StreamWrite(ctx context.Context, opts ...grpc.CallOption) (GroupStore_StreamWriteClient, error)
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	StreamLookup(ctx context.Context, opts ...grpc.CallOption) (GroupStore_StreamLookupClient, error)
	LookupGroup(ctx context.Context, in *LookupGroupRequest, opts ...grpc.CallOption) (*LookupGroupResponse, error)
	StreamLookupGroup(ctx context.Context, opts ...grpc.CallOption) (GroupStore_StreamLookupGroupClient, error)
	ReadGroup(ctx context.Context, in *ReadGroupRequest, opts ...grpc.CallOption) (*ReadGroupResponse, error)
	StreamReadGroup(ctx context.Context, opts ...grpc.CallOption) (GroupStore_StreamReadGroupClient, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	StreamRead(ctx context.Context, opts ...grpc.CallOption) (GroupStore_StreamReadClient, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	StreamDelete(ctx context.Context, opts ...grpc.CallOption) (GroupStore_StreamDeleteClient, error)
}

type groupStoreClient struct {
	cc *grpc.ClientConn
}

func NewGroupStoreClient(cc *grpc.ClientConn) GroupStoreClient {
	return &groupStoreClient{cc}
}

func (c *groupStoreClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := grpc.Invoke(ctx, "/groupproto.GroupStore/Write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupStoreClient) StreamWrite(ctx context.Context, opts ...grpc.CallOption) (GroupStore_StreamWriteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GroupStore_serviceDesc.Streams[0], c.cc, "/groupproto.GroupStore/StreamWrite", opts...)
	if err != nil {
		return nil, err
	}
	x := &groupStoreStreamWriteClient{stream}
	return x, nil
}

type GroupStore_StreamWriteClient interface {
	Send(*WriteRequest) error
	Recv() (*WriteResponse, error)
	grpc.ClientStream
}

type groupStoreStreamWriteClient struct {
	grpc.ClientStream
}

func (x *groupStoreStreamWriteClient) Send(m *WriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *groupStoreStreamWriteClient) Recv() (*WriteResponse, error) {
	m := new(WriteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *groupStoreClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := grpc.Invoke(ctx, "/groupproto.GroupStore/Lookup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupStoreClient) StreamLookup(ctx context.Context, opts ...grpc.CallOption) (GroupStore_StreamLookupClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GroupStore_serviceDesc.Streams[1], c.cc, "/groupproto.GroupStore/StreamLookup", opts...)
	if err != nil {
		return nil, err
	}
	x := &groupStoreStreamLookupClient{stream}
	return x, nil
}

type GroupStore_StreamLookupClient interface {
	Send(*LookupRequest) error
	Recv() (*LookupResponse, error)
	grpc.ClientStream
}

type groupStoreStreamLookupClient struct {
	grpc.ClientStream
}

func (x *groupStoreStreamLookupClient) Send(m *LookupRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *groupStoreStreamLookupClient) Recv() (*LookupResponse, error) {
	m := new(LookupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *groupStoreClient) LookupGroup(ctx context.Context, in *LookupGroupRequest, opts ...grpc.CallOption) (*LookupGroupResponse, error) {
	out := new(LookupGroupResponse)
	err := grpc.Invoke(ctx, "/groupproto.GroupStore/LookupGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupStoreClient) StreamLookupGroup(ctx context.Context, opts ...grpc.CallOption) (GroupStore_StreamLookupGroupClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GroupStore_serviceDesc.Streams[2], c.cc, "/groupproto.GroupStore/StreamLookupGroup", opts...)
	if err != nil {
		return nil, err
	}
	x := &groupStoreStreamLookupGroupClient{stream}
	return x, nil
}

type GroupStore_StreamLookupGroupClient interface {
	Send(*LookupGroupRequest) error
	Recv() (*LookupGroupResponse, error)
	grpc.ClientStream
}

type groupStoreStreamLookupGroupClient struct {
	grpc.ClientStream
}

func (x *groupStoreStreamLookupGroupClient) Send(m *LookupGroupRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *groupStoreStreamLookupGroupClient) Recv() (*LookupGroupResponse, error) {
	m := new(LookupGroupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *groupStoreClient) ReadGroup(ctx context.Context, in *ReadGroupRequest, opts ...grpc.CallOption) (*ReadGroupResponse, error) {
	out := new(ReadGroupResponse)
	err := grpc.Invoke(ctx, "/groupproto.GroupStore/ReadGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupStoreClient) StreamReadGroup(ctx context.Context, opts ...grpc.CallOption) (GroupStore_StreamReadGroupClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GroupStore_serviceDesc.Streams[3], c.cc, "/groupproto.GroupStore/StreamReadGroup", opts...)
	if err != nil {
		return nil, err
	}
	x := &groupStoreStreamReadGroupClient{stream}
	return x, nil
}

type GroupStore_StreamReadGroupClient interface {
	Send(*ReadGroupRequest) error
	Recv() (*ReadGroupResponse, error)
	grpc.ClientStream
}

type groupStoreStreamReadGroupClient struct {
	grpc.ClientStream
}

func (x *groupStoreStreamReadGroupClient) Send(m *ReadGroupRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *groupStoreStreamReadGroupClient) Recv() (*ReadGroupResponse, error) {
	m := new(ReadGroupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *groupStoreClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := grpc.Invoke(ctx, "/groupproto.GroupStore/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupStoreClient) StreamRead(ctx context.Context, opts ...grpc.CallOption) (GroupStore_StreamReadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GroupStore_serviceDesc.Streams[4], c.cc, "/groupproto.GroupStore/StreamRead", opts...)
	if err != nil {
		return nil, err
	}
	x := &groupStoreStreamReadClient{stream}
	return x, nil
}

type GroupStore_StreamReadClient interface {
	Send(*ReadRequest) error
	Recv() (*ReadResponse, error)
	grpc.ClientStream
}

type groupStoreStreamReadClient struct {
	grpc.ClientStream
}

func (x *groupStoreStreamReadClient) Send(m *ReadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *groupStoreStreamReadClient) Recv() (*ReadResponse, error) {
	m := new(ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *groupStoreClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/groupproto.GroupStore/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupStoreClient) StreamDelete(ctx context.Context, opts ...grpc.CallOption) (GroupStore_StreamDeleteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GroupStore_serviceDesc.Streams[5], c.cc, "/groupproto.GroupStore/StreamDelete", opts...)
	if err != nil {
		return nil, err
	}
	x := &groupStoreStreamDeleteClient{stream}
	return x, nil
}

type GroupStore_StreamDeleteClient interface {
	Send(*DeleteRequest) error
	Recv() (*DeleteResponse, error)
	grpc.ClientStream
}

type groupStoreStreamDeleteClient struct {
	grpc.ClientStream
}

func (x *groupStoreStreamDeleteClient) Send(m *DeleteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *groupStoreStreamDeleteClient) Recv() (*DeleteResponse, error) {
	m := new(DeleteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GroupStore service

type GroupStoreServer interface {
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	StreamWrite(GroupStore_StreamWriteServer) error
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
	StreamLookup(GroupStore_StreamLookupServer) error
	LookupGroup(context.Context, *LookupGroupRequest) (*LookupGroupResponse, error)
	StreamLookupGroup(GroupStore_StreamLookupGroupServer) error
	ReadGroup(context.Context, *ReadGroupRequest) (*ReadGroupResponse, error)
	StreamReadGroup(GroupStore_StreamReadGroupServer) error
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	StreamRead(GroupStore_StreamReadServer) error
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	StreamDelete(GroupStore_StreamDeleteServer) error
}

func RegisterGroupStoreServer(s *grpc.Server, srv GroupStoreServer) {
	s.RegisterService(&_GroupStore_serviceDesc, srv)
}

func _GroupStore_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupStoreServer).Write(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupStore_StreamWrite_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GroupStoreServer).StreamWrite(&groupStoreStreamWriteServer{stream})
}

type GroupStore_StreamWriteServer interface {
	Send(*WriteResponse) error
	Recv() (*WriteRequest, error)
	grpc.ServerStream
}

type groupStoreStreamWriteServer struct {
	grpc.ServerStream
}

func (x *groupStoreStreamWriteServer) Send(m *WriteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *groupStoreStreamWriteServer) Recv() (*WriteRequest, error) {
	m := new(WriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GroupStore_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupStoreServer).Lookup(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupStore_StreamLookup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GroupStoreServer).StreamLookup(&groupStoreStreamLookupServer{stream})
}

type GroupStore_StreamLookupServer interface {
	Send(*LookupResponse) error
	Recv() (*LookupRequest, error)
	grpc.ServerStream
}

type groupStoreStreamLookupServer struct {
	grpc.ServerStream
}

func (x *groupStoreStreamLookupServer) Send(m *LookupResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *groupStoreStreamLookupServer) Recv() (*LookupRequest, error) {
	m := new(LookupRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GroupStore_LookupGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(LookupGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupStoreServer).LookupGroup(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupStore_StreamLookupGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GroupStoreServer).StreamLookupGroup(&groupStoreStreamLookupGroupServer{stream})
}

type GroupStore_StreamLookupGroupServer interface {
	Send(*LookupGroupResponse) error
	Recv() (*LookupGroupRequest, error)
	grpc.ServerStream
}

type groupStoreStreamLookupGroupServer struct {
	grpc.ServerStream
}

func (x *groupStoreStreamLookupGroupServer) Send(m *LookupGroupResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *groupStoreStreamLookupGroupServer) Recv() (*LookupGroupRequest, error) {
	m := new(LookupGroupRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GroupStore_ReadGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ReadGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupStoreServer).ReadGroup(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupStore_StreamReadGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GroupStoreServer).StreamReadGroup(&groupStoreStreamReadGroupServer{stream})
}

type GroupStore_StreamReadGroupServer interface {
	Send(*ReadGroupResponse) error
	Recv() (*ReadGroupRequest, error)
	grpc.ServerStream
}

type groupStoreStreamReadGroupServer struct {
	grpc.ServerStream
}

func (x *groupStoreStreamReadGroupServer) Send(m *ReadGroupResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *groupStoreStreamReadGroupServer) Recv() (*ReadGroupRequest, error) {
	m := new(ReadGroupRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GroupStore_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupStoreServer).Read(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupStore_StreamRead_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GroupStoreServer).StreamRead(&groupStoreStreamReadServer{stream})
}

type GroupStore_StreamReadServer interface {
	Send(*ReadResponse) error
	Recv() (*ReadRequest, error)
	grpc.ServerStream
}

type groupStoreStreamReadServer struct {
	grpc.ServerStream
}

func (x *groupStoreStreamReadServer) Send(m *ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *groupStoreStreamReadServer) Recv() (*ReadRequest, error) {
	m := new(ReadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GroupStore_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupStoreServer).Delete(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupStore_StreamDelete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GroupStoreServer).StreamDelete(&groupStoreStreamDeleteServer{stream})
}

type GroupStore_StreamDeleteServer interface {
	Send(*DeleteResponse) error
	Recv() (*DeleteRequest, error)
	grpc.ServerStream
}

type groupStoreStreamDeleteServer struct {
	grpc.ServerStream
}

func (x *groupStoreStreamDeleteServer) Send(m *DeleteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *groupStoreStreamDeleteServer) Recv() (*DeleteRequest, error) {
	m := new(DeleteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GroupStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "groupproto.GroupStore",
	HandlerType: (*GroupStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _GroupStore_Write_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _GroupStore_Lookup_Handler,
		},
		{
			MethodName: "LookupGroup",
			Handler:    _GroupStore_LookupGroup_Handler,
		},
		{
			MethodName: "ReadGroup",
			Handler:    _GroupStore_ReadGroup_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _GroupStore_Read_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GroupStore_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamWrite",
			Handler:       _GroupStore_StreamWrite_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamLookup",
			Handler:       _GroupStore_StreamLookup_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamLookupGroup",
			Handler:       _GroupStore_StreamLookupGroup_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamReadGroup",
			Handler:       _GroupStore_StreamReadGroup_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamRead",
			Handler:       _GroupStore_StreamRead_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamDelete",
			Handler:       _GroupStore_StreamDelete_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x95, 0x5f, 0x6f, 0xd3, 0x30,
	0x14, 0xc5, 0x49, 0xd3, 0x14, 0x7a, 0x92, 0xb4, 0xd4, 0x48, 0x90, 0x8e, 0xbf, 0xf2, 0x53, 0xc5,
	0x43, 0x35, 0x0d, 0x78, 0x42, 0x42, 0x5a, 0x45, 0x05, 0x6c, 0x8c, 0x3f, 0x1b, 0x12, 0x12, 0x42,
	0x9a, 0xc2, 0x66, 0x75, 0xd1, 0x9a, 0x25, 0x24, 0x29, 0x68, 0x5f, 0x81, 0x4f, 0x4d, 0xe2, 0xd4,
	0x9e, 0xdd, 0xb4, 0x5a, 0xa1, 0x79, 0xab, 0x7d, 0xef, 0x3d, 0xfe, 0xf9, 0xde, 0xe3, 0x06, 0xdd,
	0x49, 0x12, 0xcd, 0xe2, 0x63, 0x3f, 0x0e, 0x86, 0x71, 0x12, 0x65, 0x11, 0x01, 0xdf, 0xe0, 0xbf,
	0x29, 0x70, 0x6b, 0x1c, 0xc6, 0xd9, 0xe5, 0x41, 0x3a, 0xa1, 0xbf, 0xe1, 0x7c, 0x4d, 0x82, 0x8c,
	0x1d, 0xb2, 0x9f, 0x33, 0x96, 0x66, 0xc4, 0x41, 0xf3, 0x9c, 0x5d, 0xee, 0x7a, 0xc6, 0x13, 0x63,
	0xd0, 0x9c, 0xaf, 0x46, 0x5e, 0x83, 0xaf, 0x7a, 0x68, 0x9f, 0x9c, 0x05, 0xd3, 0xd3, 0xfd, 0x22,
	0xc1, 0x5c, 0xdc, 0x1a, 0x79, 0x4d, 0xbe, 0xe5, 0xc2, 0xfa, 0xe5, 0x4f, 0x67, 0xcc, 0xb3, 0xf2,
	0xa5, 0x43, 0xee, 0xa2, 0x93, 0x05, 0x61, 0x2e, 0xed, 0x87, 0xf1, 0x41, 0x70, 0x92, 0x44, 0x5e,
	0x2b, 0xdf, 0x37, 0xe9, 0x67, 0xb8, 0xef, 0xa3, 0xe8, 0x7c, 0x16, 0xd7, 0x76, 0x32, 0xfd, 0x08,
	0xfb, 0x90, 0xf9, 0xa7, 0xf5, 0x09, 0x06, 0x70, 0x5f, 0xb3, 0x29, 0xab, 0xb3, 0x3b, 0xd5, 0x76,
	0x58, 0xbc, 0x1d, 0xdb, 0x20, 0x65, 0x3b, 0xde, 0x14, 0x73, 0x5a, 0xe3, 0x3c, 0x3a, 0xc4, 0xed,
	0xe2, 0xb6, 0x6b, 0xe7, 0x3f, 0x87, 0x3b, 0x9f, 0x74, 0x1a, 0x47, 0x17, 0x29, 0x5b, 0x82, 0x52,
	0x94, 0x99, 0xc4, 0x86, 0xc9, 0x92, 0x84, 0x57, 0xb5, 0xe9, 0x18, 0x1d, 0x31, 0xa6, 0x6b, 0xca,
	0x3a, 0x68, 0x4d, 0xd9, 0xc5, 0x24, 0x3b, 0xe3, 0x95, 0xae, 0x90, 0x31, 0xb9, 0xcc, 0x07, 0xdc,
	0xd1, 0xae, 0x37, 0xd7, 0x7a, 0x0a, 0x2b, 0x27, 0x0a, 0xd3, 0x5c, 0xc2, 0x1c, 0xd8, 0x3b, 0xf7,
	0x87, 0x57, 0x2e, 0x1d, 0x2a, 0xf9, 0xef, 0xf2, 0x1c, 0x1d, 0xeb, 0x18, 0xdd, 0xc5, 0xb8, 0xd6,
	0x7f, 0xa3, 0xda, 0xff, 0xc6, 0x8a, 0xfe, 0x9b, 0x0b, 0xf4, 0xc5, 0x9c, 0x5c, 0xba, 0x87, 0x9e,
	0xd2, 0xdd, 0x39, 0xee, 0x40, 0xc7, 0xed, 0xab, 0xb8, 0x32, 0xbb, 0x0a, 0xfb, 0x1d, 0xae, 0x1e,
	0xdd, 0x0c, 0x55, 0x3e, 0xb0, 0x82, 0xd4, 0xa1, 0x23, 0x38, 0xa5, 0xeb, 0xaf, 0x99, 0x8f, 0x2c,
	0x6b, 0xf0, 0x77, 0xa9, 0x8d, 0xe7, 0x05, 0x3a, 0xc2, 0xe8, 0xff, 0x60, 0x8e, 0x9d, 0x3f, 0x37,
	0x01, 0x7e, 0xab, 0xa3, 0x2c, 0x4a, 0x18, 0x79, 0x05, 0x8b, 0x3b, 0x8c, 0x78, 0x6a, 0x63, 0xd4,
	0xbf, 0x97, 0xad, 0xfe, 0x92, 0x48, 0x79, 0x22, 0xbd, 0x41, 0xde, 0xc2, 0x3e, 0xca, 0x12, 0xe6,
	0x87, 0x9b, 0xa8, 0x0c, 0x8c, 0x6d, 0x83, 0xec, 0xa2, 0x55, 0xda, 0x83, 0xf4, 0xab, 0x96, 0x12,
	0x2a, 0x5b, 0xcb, 0x42, 0x12, 0x66, 0x1f, 0x4e, 0x09, 0xb3, 0xa1, 0x10, 0xe7, 0xf9, 0x04, 0x5b,
	0xb1, 0x2b, 0x79, 0xb4, 0xc2, 0xe7, 0x42, 0xf0, 0xf1, 0xca, 0xb8, 0xc4, 0xfb, 0x86, 0x9e, 0x8a,
	0x57, 0x97, 0x2e, 0xa7, 0xdd, 0x43, 0x5b, 0xfa, 0x95, 0x3c, 0x58, 0x6a, 0x72, 0xa1, 0xf8, 0x70,
	0x45, 0x54, 0x72, 0x7e, 0x41, 0xb7, 0xe4, 0xac, 0x4b, 0x91, 0x13, 0xbe, 0x44, 0xb3, 0x08, 0x91,
	0x7b, 0x8b, 0xc9, 0x42, 0xc5, 0xab, 0x06, 0x24, 0xd2, 0x18, 0xb8, 0x42, 0xfa, 0x2f, 0x09, 0xe1,
	0xb1, 0xf2, 0xcd, 0xe8, 0xd6, 0xd0, 0x3e, 0x18, 0xba, 0x35, 0xf4, 0x27, 0xa6, 0x7a, 0x6c, 0x43,
	0xa1, 0x82, 0xe7, 0x47, 0x8b, 0xc7, 0x9e, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x72, 0x5e,
	0x55, 0xfb, 0x07, 0x00, 0x00,
}
